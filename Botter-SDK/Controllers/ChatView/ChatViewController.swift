//
//  ChatViewController.swift
//  Botter
//
//  Created by Nora on 6/3/20.
//  Copyright (c) 2020 BlueCrunch. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class b_ChatViewController: UIViewController {
    
    // MARK: - Public properties -
    
    @IBOutlet weak var groupedDateLbl : b_PaddedUILabel!
    @IBOutlet weak var tableView : UITableView!
    @IBOutlet weak var chatView : b_TextBoxFeild!
    @IBOutlet weak var bottomConstraint : NSLayoutConstraint!
    @IBOutlet weak var heightConstraint : NSLayoutConstraint!
    @IBOutlet weak var connectionErrorView : UIView!
    @IBOutlet weak var menuBtn : b_AccentBtn!
    
    var presenter: ChatPresenterInterface!
    var original : CGFloat = 0
    var currentAudio = -1
    static var botData = b_BotData()
    var history = true
    static var isClosing = false
    
    // MARK: - Lifecycle -
    
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        b_ChatViewController.isClosing = false
        history = !B_SocketManager.first
        startListen()
        menuBtn.isHidden = b_ChatViewController.botData.menu.actions.count == 0
        registerCells()
        if #available(iOS 13.0, *) {
            overrideUserInterfaceStyle = .light
        } else {
            // Fallback on earlier versions
        }
        self.keyBoardSettings()
        self.presenter.openSocket()
        b_AudioHandler.shared = b_AudioHandler()
        
        for v in self.view.subviews{
            v.semanticContentAttribute = .forceLeftToRight
        }
//        NotificationCenter.default.addObserver(self, selector: #selector(pauseSession(notification:)), name: UIApplication.didEnterBackgroundNotification, object: nil)

//        NotificationCenter.default.addObserver(self, selector: #selector(resumeSession(notification:)), name: UIApplication.willEnterForegroundNotification, object: nil)

        NotificationCenter.default.addObserver(self, selector: #selector(pauseSession(notification:)), name: UIApplication.willResignActiveNotification, object: nil)
        
        NotificationCenter.default.addObserver(self, selector: #selector(resumeSession(notification:)), name: UIApplication.didBecomeActiveNotification, object: nil)
    }
    
   
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        
    }
    
    @objc func pauseSession(notification: NSNotification){
        print("Fired: " + notification.name.rawValue)
        B_SocketManager.shared.pauseSession()
    }
    
    @objc func resumeSession(notification: NSNotification ){
        print("Fired: " + notification.name.rawValue)
        B_SocketManager.shared.resumeSession()
    }
    
    
    func registerCells(){
        tableView.registerBotterCellNib(FlightTicketTableViewCell.self)
        tableView.registerBotterCellNib(FlightStatusTableViewCell.self)
        tableView.registerBotterCellNib(InvoiceTableViewCell.self)
        tableView.registerBotterCellNib(NotifyTableViewCell.self)
        tableView.registerBotterCellNib(UserImageTableViewCell.self)
        tableView.registerBotterCellNib(AttachmentTableViewCell.self)
        tableView.registerBotterCellNib(TextInputCardTableViewCell.self)
        tableView.registerBotterCellNib(AttachmentInputCardTableViewCell.self)
    }
    
    override func b_backDismiss(_ sender: Any) {
        
        if BotterSettingsManager.showOnClosePopup{
            self.showOnClosePopup()
        }else{
            
            close()
        }
    }
    
    func showOnClosePopup(){
        let alert = UIAlertController(title: "Are you sure, you want to close the chat?".b_localize() , message: "" , preferredStyle: UIAlertController.Style.alert)
        
        alert.addAction(UIAlertAction(title: "Cancel".b_localize() , style: UIAlertAction.Style.cancel , handler: {(UIAlertAction) in
            
        }))
        alert.addAction(UIAlertAction(title: "Will come back later".b_localize() , style: UIAlertAction.Style.default , handler: {(UIAlertAction) in
            self.close()
        }
            
        ))
        alert.addAction(UIAlertAction(title: "End Session".b_localize() , style: UIAlertAction.Style.default , handler: {(UIAlertAction) in
            self.endSession()
        }
            
        ))
        
        self.present(alert, animated: true, completion: nil)
    }
    
    func endSession(){
        self.presenter.endSession()
        ChatSessionManager.shared.setActiveSessionMessage(msg: nil)
//        if b_ChatViewController.botData.endForm.inputs.count > 0 {
//            self.presenter.openEndForm(form: b_ChatViewController.botData.endForm, isHistory : self.history)
//
//        }else{
//            close()
//        }
          close()
    }
    
    func close(){
        b_ChatViewController.isClosing = true
        self.presenter.close()
        NotificationCenter.default.removeObserver(self)
        if self.history{
            self.presentingViewController?.dismiss(animated: true, completion: nil)
        }else{
            self.presentingViewController?.presentingViewController?.dismiss(animated: true, completion: nil)
        }
    }
    
    @IBAction func closeConnectionUpdateView(){
        connectionErrorView.isHidden = true
    }
    
    func connectionUpdated(isConnected : Bool){
        if BotterSettingsManager.shouldHandleConectionStatus{
            DispatchQueue.main.async {
                self.connectionErrorView.isHidden = isConnected
            }
        }
    }
    
    @IBAction func botterWebsiteClicked (){
        CommonActions.botterSiteClicked()
    }
    @IBAction func openMenu (){
        b_menuViewController.open(in: self, menu: b_ChatViewController.botData.menu) { (item) in
            self.presenter.sendMenuAction(action: item)
        }
    }
    
    @IBAction func openAttachments (){
        b_AttachFileViewController.open(in: self) { (file) in
            self.presenter.sendAttachment(file: file)
        }
    }
    
    @IBAction func sendMesg(){
        self.view.endEditing(true)
        if chatView.getText().isEmpty{
            
        }else{
            self.presenter.sendMessage(text: self.chatView.getText())
        }
    }
    
    func clearTextBox() {
        self.chatView.setText(text: "")
    }
    
    func showError(errorMsg: String) {
        self.b_showMessage(errorMsg)
    }
    
}

// MARK: - Extensions -

extension b_ChatViewController: ChatViewInterface {
    func reload() {
        self.tableView.reloadData()
        if self.presenter.messgesList.count > 0 {
//            let msg = presenter.messgesList[presenter.messgesList.count - 1]
            self.tableView.scrollToRow(at: IndexPath.init(row: self.presenter.messgesList.count - 1 , section: 0), at: .bottom, animated: false)
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                // your code here
                self.tableView.scrollToRow(at: IndexPath.init(row: self.presenter.messgesList.count - 1 , section: 0), at: .bottom, animated: false)
            }
        }
        
        
    }
    
    
}


extension b_ChatViewController {
    func keyBoardSettings(){
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow), name: UIResponder.keyboardWillShowNotification, object: nil)
        //
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide), name: UIResponder.keyboardWillHideNotification, object: nil)
        
        NotificationCenter.default.addObserver(self, selector: #selector(inputModeDidChange), name: UITextInputMode.currentInputModeDidChangeNotification , object: nil)
        
        original = bottomConstraint.constant
    }
    
    @objc func inputModeDidChange(_ notification: Notification) {
   
        if let inputMode = chatView.field.textInputMode{
            if let lang = inputMode.primaryLanguage{
//                print(lang)
                if chatView.field.text.b_trim() == "" || chatView.field.tag == 0{
                    if lang.contains("ar"){
                        chatView.field.textAlignment = .right
                    }else if lang.contains("en") {
                        chatView.field.textAlignment = .left
                    }
                }
            }
        }
    }
    
    @objc func keyboardWillShow(notification: NSNotification) {
        
        adjustingHeight(show: true, notification: notification)
    }
    
    @objc func keyboardWillHide(notification: NSNotification) {
        adjustingHeight(show: false, notification: notification)
    }
    
    func adjustingHeight(show:Bool, notification:NSNotification) {
        // 1
        let userInfo = notification.userInfo!
        // 2
        let keyboardFrame:CGRect = (userInfo[UIResponder.keyboardFrameEndUserInfoKey] as! NSValue).cgRectValue
        // 3
        let animationDurarion = userInfo[UIResponder.keyboardAnimationDurationUserInfoKey] as! TimeInterval
        // 4
        var changeInHeight = (keyboardFrame.height)
        
        if #available(iOS 11.0, *) {
            let bottom = UIApplication.shared.keyWindow?.safeAreaInsets.bottom
            if show{
                changeInHeight = ( changeInHeight - (bottom ?? 0) ) * (show ? 1 : -1)
            }else{
                changeInHeight = ( changeInHeight - (bottom ?? 0) ) * (show ? 1 : -1)
            }
        } else {
            changeInHeight = ( changeInHeight ) * (show ? 1 : -1)
        }
        //5
        let lastVisibleCell = tableView.indexPathsForVisibleRows?.last
        let newValue = self.bottomConstraint.constant + changeInHeight
        UIView.animate(
            withDuration: animationDurarion,
            delay: 0,
            options: [.curveEaseInOut],
            animations: {
                if newValue < self.original {
//                    print("Alert----------------")
                    self.bottomConstraint.constant = self.original
                }else if changeInHeight > 0 && newValue > changeInHeight + self.original{
                    self.bottomConstraint.constant = changeInHeight + self.original
                }else{
                    self.bottomConstraint.constant = newValue
                }
                self.view.layoutIfNeeded()
                if show{
                    if let lastVisibleCell = lastVisibleCell {
                        self.tableView.scrollToRow(
                            at: lastVisibleCell,
                            at: .bottom,
                            animated: false)
                    }
                }
        })
        
    }
    
    //    override func viewWillDisappear(_ animated: Bool) {
    //        super.viewWillDisappear(animated)
    //        if isBeingDismissed {
    //            // TODO: Do your stuff here.
    //            SocketManager.shared.dissConnect()
    //        }
    //    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        B_SocketManager.shared.connect()
//        if !self.isBeingPresented{
//            B_SocketManager.shared.resumeSession()
//        }
        
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        
        b_AudioHandler.shared.player.pause()
        if (self.isBeingDismissed || self.isMovingFromParent) {
            // clean up code here
            B_SocketManager.shared = nil
            B_SocketManager.shared = B_SocketManager()
            NotificationManager.shared.clear()
        }else{
            
        }
    }
    
    func startListen() {
        NotificationCenter.default.addObserver(self, selector: #selector(applicationWillEnterForeground(_:)), name: UIApplication.willEnterForegroundNotification, object: nil)
    }
    
    func stopListen() {
        NotificationCenter.default.removeObserver(self)
    }
    
    @objc func applicationWillEnterForeground(_ notification: NSNotification) {
//        print("App moved to foreground!")
        B_SocketManager.shared.connect()
    }
    
    func removeObservers(){
        
        if self.isBeingDismissed  //presented view controller
        {
            // remove observer here
            NotificationCenter.default.removeObserver(self)
        }
    }
    
    
}
extension b_ChatViewController : b_TextBoxDelegate{
    func textBoxDidChange(textBox: b_TextBoxFeild) {
        
    }
    
    func shouldChangeTextInRange(textBox: b_TextBoxFeild) {
        
    }
    
    func textBoxDidBeginEditing(textBox: b_TextBoxFeild) {
        
    }
    
    func textBoxDidEndEditing(textBox: b_TextBoxFeild) {
        
    }
    
    func textBoxShouldBeginEditing(textBox: b_TextBoxFeild) {
        
    }
    
    func textBoxShouldEndEditing(textBox: b_TextBoxFeild) {
        
    }
    
    func checkIfLastBotInput(index : Int)->Bool{
        var isLastBotInput = false
        let msg = presenter.messgesList[index]
        if presenter.messgesList.count - 1 == index{
            isLastBotInput = true && msg.sender.senderType != .user
        }else{
            let nextMsg = presenter.messgesList[index + 1]
            isLastBotInput = msg.sender.senderType != nextMsg.sender.senderType
        }
        
        return isLastBotInput
    }
    
    func openDatePicker(msg : b_BasicMessage){
        b_DatePickerPopViewController.open(in: self, mode: msg.hasTime ? .time : .date) { (selected) in
            msg.actions[0].title = selected
            self.presenter.triviaActionClicked(action: msg.actions[0])
        }
    }
    
}
extension b_ChatViewController : UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.presenter.messgesList.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        var msg = b_BasicMessage()
        if indexPath.row < presenter.messgesList.count{
            msg = presenter.messgesList[indexPath.row]
            let last = presenter.messgesList[presenter.messgesList.count - 1]
            if (last.msgType == .userInput && !last.prompt.answered) || last.msgType == .triviaQuestion{
                if heightConstraint.constant == 65{
                    self.view.endEditing(true)
                }
                heightConstraint.constant = 0
            }else{
                heightConstraint.constant = 65
                
            }
        }
        
        ChatSessionManager.shared.setActiveSessionMessage(msg: msg)
        switch msg.msgType {
        case .image:
            let cell = tableView.dequeueReusableCell(withIdentifier: "ImageBotTableViewCell") as? ImageBotTableViewCell
            cell?.setData(msg: msg , showIcon: checkIfLastBotInput(index: indexPath.row))
            return cell ?? UITableViewCell()
        case .gif:
            let cell = tableView.dequeueReusableCell(withIdentifier: "GifTableViewCell") as? GifTableViewCell
            cell?.setData(msg: msg , showIcon: checkIfLastBotInput(index: indexPath.row))
            return cell ?? UITableViewCell()
        case .video:
            let cell = tableView.dequeueReusableCell(withIdentifier: "VideoBotTableViewCell") as? VideoBotTableViewCell
            cell?.setData(msg: msg , showIcon: checkIfLastBotInput(index: indexPath.row))
            cell?.openVideo = { url in
                self.presenter.openVideo(url: url)
            }
            return cell ?? UITableViewCell()
        case .hero:
            let cell = tableView.dequeueReusableCell(withIdentifier: "HeroTableViewCell") as? HeroTableViewCell
            cell?.setData(msg: msg , showIcon: checkIfLastBotInput(index: indexPath.row))
            cell?.actionClicked = { action in
                self.presenter.actionClicked(action: action)
            }
            return cell ?? UITableViewCell()
        case .triviaQuestion , .dateTime:
            let cell = tableView.dequeueReusableCell(withIdentifier: "TriviaTableViewCell") as? TriviaTableViewCell
            cell?.setData(msg: msg , showIcon: checkIfLastBotInput(index: indexPath.row))
            cell?.actionClicked = { action in
                if msg.msgType == .triviaQuestion{
                    self.presenter.triviaActionClicked(action: action)
                }else{
                    self.openDatePicker(msg: msg)
                }
            }
            return cell ?? UITableViewCell()
        case .gallery:
            let cell = tableView.dequeueReusableCell(withIdentifier: "GallaryTableViewCell") as? GallaryTableViewCell
            cell?.setData(msg: msg , showIcon: checkIfLastBotInput(index: indexPath.row))
            cell?.actionClicked = { action in
                self.presenter.actionClicked(action: action)
            }
            cell?.openVideo = { url in
                self.presenter.openVideo(url: url)
            }
            return cell ?? UITableViewCell()
        case .map:
            let cell = tableView.dequeueReusableCell(withIdentifier: "MapTableViewCell") as? MapTableViewCell
            cell?.setData(msg: msg , showIcon: checkIfLastBotInput(index: indexPath.row))
            //                cell?.actionClicked = { action in
            //                    self.presenter.actionClicked(action: action)
            //                }
            return cell ?? UITableViewCell()
        case .audio:
            let cell = tableView.dequeueReusableCell(withIdentifier: "AudioBotTableViewCell") as? AudioBotTableViewCell
            cell?.setData(msg: msg , showIcon: checkIfLastBotInput(index: indexPath.row), isCurrent: indexPath.row == currentAudio, index: indexPath.row)
            return cell ?? UITableViewCell()
        case .typing :
            let cell = tableView.dequeueReusableCell(withIdentifier: "TypingIndicatorTableViewCell") as? TypingIndicatorTableViewCell
            cell?.setData(msg: msg , showIcon: checkIfLastBotInput(index: indexPath.row))
            return cell ?? UITableViewCell()
        case .weather :
            let cell = tableView.dequeueReusableCell(withIdentifier: "WeatherTableViewCell") as? WeatherTableViewCell
            cell?.setData(msg: msg , showIcon: checkIfLastBotInput(index: indexPath.row))
            return cell ?? UITableViewCell()
        case .flightPassngers :
            let cell = tableView.dequeueReusableCell(withIdentifier: "FlightTicketTableViewCell") as? FlightTicketTableViewCell
            cell?.setData(msg: msg , showIcon: checkIfLastBotInput(index: indexPath.row))
            return cell ?? UITableViewCell()
        case .flightStatus :
            let cell = tableView.dequeueReusableCell(withIdentifier: "FlightStatusTableViewCell") as? FlightStatusTableViewCell
            cell?.setData(msg: msg , showIcon: checkIfLastBotInput(index: indexPath.row))
            return cell ?? UITableViewCell()
        case .receipt :
            let cell = tableView.dequeueReusableCell(withIdentifier: "InvoiceTableViewCell") as? InvoiceTableViewCell
            cell?.setData(msg: msg , showIcon: checkIfLastBotInput(index: indexPath.row))
            return cell ?? UITableViewCell()
        case .notify :
            let cell = tableView.dequeueReusableCell(withIdentifier: "NotifyTableViewCell") as? NotifyTableViewCell
            cell?.setData(text: msg.notifyText)
            return cell ?? UITableViewCell()
        case .userMsg  :
            let cell = tableView.dequeueReusableCell(withIdentifier: msg.msgSent ? "UserChatTableViewCell" : "UserFaildChatTableViewCell") as? UserChatTableViewCell
            cell?.setData(msg: msg )
            cell?.resendAction = { myMsg in
                self.presenter.resend(msg: myMsg)
            }
            return cell ?? UITableViewCell()
        case .userImage, .userLocation:
            let cell = tableView.dequeueReusableCell(withIdentifier:  "UserImageTableViewCell" ) as? UserImageTableViewCell
            
            cell?.setData(msg: msg)
            //                cell?.resendAction = { myMsg in
            //                    self.presenter.resend(msg: myMsg)
            //                }
            cell?.tag = indexPath.row
            return cell ?? UITableViewCell()
        case .attachment:
            let cell = tableView.dequeueReusableCell(withIdentifier: "AttachmentTableViewCell") as? AttachmentTableViewCell
            cell?.setData(msg: msg)
            return cell ?? UITableViewCell()
        case .userInput:
            if msg.prompt.typeString.lowercased() == "file"{
                let cell = tableView.dequeueReusableCell(withIdentifier: "AttachmentInputCardTableViewCell") as? AttachmentInputCardTableViewCell
                cell?.setData(msg: msg, showIcon: checkIfLastBotInput(index: indexPath.row), completion: {
                    self.openAttachments()
                })
                return cell ?? UITableViewCell()
            }else{
                let cell = tableView.dequeueReusableCell(withIdentifier: "TextInputCardTableViewCell") as? TextInputCardTableViewCell
                cell?.setData(msg: msg, showIcon: checkIfLastBotInput(index: indexPath.row), completion: { (answer) in
                    self.presenter.sendMessage(text: answer)
                })
                cell?.answerChanged = { (msg) in
                    self.presenter.messgesList[msg.msgIndex].prompt.tempAnswer = msg.prompt.tempAnswer
                }
                return cell ?? UITableViewCell()
            }
        default:
            let cell = tableView.dequeueReusableCell(withIdentifier: "BotChatTableViewCell") as? BotChatTableViewCell
            cell?.setData(msg: msg , showIcon: checkIfLastBotInput(index: indexPath.row))
            return cell ?? UITableViewCell()
        }
        
        //        return UITableViewCell()
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let item = self.presenter.messgesList[indexPath.row]
        if item.msgType == .receipt{
            b_InvoiceDetailsViewController.open(in: self, invoice: item.invoice)
        }
    }
}

extension b_ChatViewController : UITableViewDelegate{
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        if presenter.messgesList[indexPath.row].msgType == .typing && !checkIfLastBotInput(index: indexPath.row){
            return 0
        }
        return UITableView.automaticDimension
    }
}

extension b_ChatViewController : UserLoadationDelegate {
    func shareUserLocation(latitude: Double, langtuide: Double) {
        presenter.sendUserLocation(latitude: latitude, langtuide: langtuide)
    }
}

extension String {
    
    func fileName() -> String {
        return URL(fileURLWithPath: self).deletingPathExtension().lastPathComponent
    }
    
    func fileExtension() -> String {
        return URL(fileURLWithPath: self).pathExtension
    }
}
